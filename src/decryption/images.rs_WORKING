  /// Decodes an encoded image and extracts text.
  ///
  /// This function takes an encoded image as input, decodes it, and extracts text from the image
  /// based on the pixel colors. It supports multiple decoding styles to improve text extraction.
  /// It returns the extracted text as an `Option<String>`. If any decoding style succeeds in
  /// extracting text, the function will return the result immediately.
  ///
  /// Supported Decoding Styles:
  /// - "h": Horizontal style (default).
  /// - "h2": Flips the image vertically for improved text extraction.
  /// - "v": Rotates the image 270 degrees for improved text extraction.
  /// - "v2": Rotates the image 90 degrees and flips it vertically for improved text extraction.
  ///
  /// # Arguments
  ///
  /// * `encoded_image` - The Base64 encoded image to be decoded and processed.
  ///
  /// # Returns
  ///
  /// An `Option<String>` containing the extracted text if successful, or `None` if there was an
  /// error during image decoding or text extraction for all decoding styles.
  ///
  /// # Examples
  ///
  /// ```
  /// use encrypted_images::decryption::images::decode_image_and_extract_text;
  ///
  /// let encoded_image = "";
  /// let extracted_text = decode_image_and_extract_text(encoded_image);
  /// assert!(extracted_text.is_some());
  /// ```

  use image::{imageops};
  use image::io::Reader as ImageReader;
  use crate::char_mappings::maps::mappings::numbers_to_letter;
  use base64::{Engine as _, engine::{self, general_purpose}, alphabet};
  const CUSTOM_ENGINE: engine::GeneralPurpose =
    engine::GeneralPurpose::new(&alphabet::STANDARD, general_purpose::PAD);

  pub fn decode_image_and_extract_text(encoded_image: &str) -> Option<String> {
    let styles = ["h", "h2", "v", "v2"];
    for &style in &styles {
        if style == "h" {
            if let Some(test) = test_and_return(&encoded_image) { 
                return Some(test)
            }
        } else if style == "h2" {
            let image_data = CUSTOM_ENGINE.decode(&encoded_image).ok()?;
            let img = match image::load(std::io::Cursor::new(&image_data), image::ImageFormat::Png) {
                Ok(img) => img,
                Err(e) => return Some(format!("Error loading image: {}", e)),
            };
            let new_img = imageops::flip_vertical(&img);
            let mut buffer = Vec::new();
            if let Err(e) = image::codecs::png::PngEncoder::new(&mut buffer).encode(&new_img, new_img.width(), new_img.height(), image::ColorType::Rgba8) {
                return Some(format!("Error encoding image: {}", e));
            }
            let encoded_image = CUSTOM_ENGINE.encode(&buffer);
            if let Some(test) = test_and_return(&encoded_image) {
                return Some(test);
            }
        } else if style == "v" {
            let image_data = CUSTOM_ENGINE.decode(&encoded_image).ok()?;
            let img = match image::load(std::io::Cursor::new(&image_data), image::ImageFormat::Png) {
                Ok(img) => img,
                Err(e) => return Some(format!("Error loading image: {}", e)),
            };
            let new_img = imageops::rotate270(&img);
            let mut buffer = Vec::new();
            if let Err(e) = image::codecs::png::PngEncoder::new(&mut buffer).encode(&new_img, new_img.width(), new_img.height(), image::ColorType::Rgba8) {
                return Some(format!("Error encoding image: {}", e));
            }
            let encoded_image = CUSTOM_ENGINE.encode(&buffer);
            if let Some(test) = test_and_return(&encoded_image) {
                return Some(test);
            }
        } else if style == "v2" {
            let image_data = CUSTOM_ENGINE.decode(&encoded_image).ok()?;
            let img = match image::load(std::io::Cursor::new(&image_data), image::ImageFormat::Png) {
                Ok(img) => img,
                Err(e) => return Some(format!("Error loading image: {}", e)),
            };
            let rotated_img = imageops::rotate90(&img);
            let new_img = imageops::flip_vertical(&rotated_img);
            let mut buffer = Vec::new();
            if let Err(e) = image::codecs::png::PngEncoder::new(&mut buffer).encode(&new_img, new_img.width(), new_img.height(), image::ColorType::Rgba8) {
                return Some(format!("Error encoding image: {}", e));
            }
            let encoded_image = CUSTOM_ENGINE.encode(&buffer);
            if let Some(test) = test_and_return(&encoded_image) {
                return Some(test);
            }
        }
    }
    println!("Error Extracting Text");
    return None;
  }

  fn test_and_return(encoded_image: &str) -> Option<String> {
    let image_data = CUSTOM_ENGINE.decode(&encoded_image).ok()?;
    let img = ImageReader::new(std::io::Cursor::new(image_data))
      .with_guessed_format()
      .unwrap()
      .decode()
      .unwrap()
      .to_rgba8();
    let width = img.width();
    let mut extracted_text = String::with_capacity(width as usize);
    for x in 0..width {
      let pixel = img.get_pixel(x, 0);
      let [r, g, b, _] = pixel.0;
      if let Some(c) = numbers_to_letter(r, g, b) {
        extracted_text.push(c);
      }
    }
    if extracted_text.is_empty() {
        return None; // Return None if the string is empty
    }
    let first_char = extracted_text.remove(0);
    extracted_text.push(first_char);
    Some(extracted_text)
  }
